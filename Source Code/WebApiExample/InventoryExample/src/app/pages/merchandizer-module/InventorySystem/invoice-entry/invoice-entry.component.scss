/* You can add global styles to this file, and also import other style files */
.grid-table
{
	display:table;
}
.thead
{
	display:table-header-group;
	font-weight:bold;
	border-bottom: 1px solid black;
    text-align: center;
    background-color: #f0f8ff;
}
.tbody
{
	display:table-row-group;
}
.tr
{
	display:table-row;
	
}
.td
{
	display:table-cell;
	padding: 10px 1px 1px 5px;
}
.thead div.tr div.td:last-child{
    background-color: #fff;
}
i:hover{
	cursor: pointer;
}

input.ng-invalid.ng-touched,select.ng-invalid.ng-touched{
	border-color: #dc3545;
}


.elementToFadeInAndOut {
    -webkit-animation: fadeinout 2s linear forwards;
    animation: fadeinout 2s linear forwards;
    opacity: 0;
}

@-webkit-keyframes fadeinout {
  50% { opacity: 1; }
}

@keyframes fadeinout {
  50% { opacity: 1; }
}


.example-form {
	min-width: 400px;
	max-width: 500px;
	width: 100%;
  }
  
  .example-full-width {
	width: 100%;
  }





//   <!-- <blockquote class="blockquote ml-5">
//   <h2>Invoice Entry</h2>
 
// </blockquote>
// <div class="grid-table">
//   <div class="thead">
//     <div class="tr">
//       <div hidden class="td">Invoice No.</div>
//       <div class="td">Product Category</div>
//       <div class="td">Product Sub. Category</div>
//       <div class="td">Quentity</div>
//       <div class="td">Rate</div>
//       <div class="td">Amount</div>
//       <div class="td">
//           <button class="btn btn-outline-success" (click)="addInvoiceRecord()">
//               <i class="fa fa-plus"></i> Add New 
//           </button>
//       </div>
//     </div>
//   </div>
// </div>
// <div class="tbody">
//   <form class="tr" [formGroup]="fg" *ngFor="let fg of invoiceEntryForm.controls; let i=index;">
//     <div class="td">
//       <input hidden class="form-control" formControlName="InvoiceNo" >
//   </div>
//   <div class="td">
//     <input class="form-control" formControlName="ProductCategory" >
// </div>
// <div class="td">
//   <input class="form-control" formControlName="ProductSubCategory">
// </div>
// <div class="td">
//   <input class="form-control" formControlName="Quentity">
// </div>
// <div class="td">
//   <input class="form-control" formControlName="Rate">
// </div>
// <div class="td">
//   <input class="form-control" formControlName="Amount">
// </div>
// <div class="td">
//   <button type="submit" class="btn" ><i
//           class="far fa-save fa-lg"></i>
     
//   </button>
//   <button class="btn btn-light ml-1" >
//       <i class="far fa-trash-alt fa-lg text-danger"></i>
//   </button>
// </div>
//   </form>
// </div> -->



// <div class="row">
//   <div class="col-lg-12">
//     <nb-card>
//       <nb-card-header>
//         <button (click)="backToInvoiceInfo()"
//         class="btn btn-outline-success "
        
//       >
//       <i class="fas fa-arrow-left"></i>
//       </button>
//         Create Invoice
//       </nb-card-header>
//       <nb-card-body>
//         <div class="row">
//           <div class="col-sm-2">
//             <div class="form-group">
              
// <form class="example-form">
//   <mat-form-field class="example-full-width">
//     <input type="text"
//            placeholder="Choose Product"
//            aria-label="Number"
//            matInput
//            [formControl]="myControl"
//            [matAutocomplete]="auto">
//     <mat-autocomplete autoActiveFirstOption #auto="matAutocomplete">
     
//       <mat-option *ngFor="let option of filteredOptions | async" [value]="option.subCategory">
//      {{option.subCategory}} ({{option.catagory}} )
//       <button class="btn btn-outline-success" (click)="productSelection(option.key)">
//                 <i class="fa fa-plus" ></i> 
//             </button>
    
//       </mat-option>
//     </mat-autocomplete>
//   </mat-form-field>
// </form>
             
//             </div>
//           </div>
//           <div class="col-sm-2">
//             <div class="form-group">
              
//             </div>
//           </div>
//           <div class="col-sm-2">
//             <div class="form-group">
              
//             </div>
//           </div>
//           <div class="col-sm-2">
//             <div class="form-group">
              
//             </div>
//           </div>
//           <div class="col-sm-2">
//             <div class="form-group">
              
//             </div>
//           </div>
//           <div class="col-sm-2">
//             <div class="form-group">
              
//             </div>
//           </div>
//         </div>
//         <div class="row">
//           <div class="col-sm-2">
//             <div class="form-group">
              
             
//             </div>
//           </div>
//           <div class="col-sm-2">
//             <div class="form-group">
              
//             </div>
//           </div>
//           <div class="col-sm-2">
//             <div class="form-group">
//               <input  type="text"  #cName="ngModel"  [(ngModel)]="clinentName"  class="form-control"  id="JobNo" placeholder="Client Name" >
//               <div class="text-left text-danger"
//               *ngIf="clinentName==''&&cName.touched">
//               Client Name  is required
//             </div>
//             </div>
//           </div>
//           <div class="col-sm-2">
//             <div class="form-group">
//               <input  type="text" #mble="ngModel"   [(ngModel)]="Mobile"  class="form-control"  id="Mobile" placeholder="Mobile">
//               <div class="text-left text-danger"
//               *ngIf="Mobile==''&&mble.touched">
//               Mobile No  is required
//             </div>
//             </div>
           
//           </div>
//           <div class="col-sm-2">
//               <div class="form-group">
//                   <input
//                   class="form-control"
//                   [matDatepicker]="picker"
//                   name="entryDate" 
//                    #eDate="ngModel"
//                   readonly
//                   [(ngModel)]="entryDate"
                   
//                    placeholder="Select Date"
//                   required >
//                   <mat-datepicker-toggle matSuffix [for]="picker"></mat-datepicker-toggle>
//                   <mat-datepicker #picker startView="year" [startAt]="startDate"></mat-datepicker>
               
//                   <div class="text-left text-danger"
//                   *ngIf="entryDate==''&&eDate.touched">
//                   Date is required 
//                 </div>
//               </div>
             
//             </div>
       
//           <div class="col-sm-2">
//             <div class="form-group">
              
//             </div>
//           </div>
//         </div>
//         <form [formGroup]="fg" *ngFor="let fg of invoiceEntryForm.controls; let i=index;" (submit)="recordSubmit(fg)" >
//           <div class="row">
//             <div class="col-sm-2">
//               <div class="form-group">
//                 <label  for="ProductCategory" class="label">Product Category</label>
//                 <select required id="ProductCategory" (change)="OnCategoryDDLChange(invoiceEntryForm)"  
//                 class="form-control" name="ProductCategory" formControlName="ProductCategory" >
//                  <option value="">Select P. Category</option>                 
//                  <option  *ngFor="let productCategorie of productCategories" [(value)]="productCategorie.ProductName">{{productCategorie.ProductName}}</option>                 
//              </select>
            
//               </div>
//             </div>
//             <div class="col-sm-2">
//                 <div class="form-group">
//                   <label  for="ProductSubCategory" class="label">Product Sub Category</label>
//                   <select required id="ProductSubCategory"  (change)="OnCategoryDDLChange(invoiceEntryForm)"
//                   class="form-control" name="ProductSubCategory" formControlName="ProductSubCategory" >
//                    <option value="">Select P. S. Category</option>                 
//                    <option for  *ngFor="let productSubCategorie of fg.value.filterproductSubCategories"  [(value)]="productSubCategorie.SubCategoreisName">{{productSubCategorie.SubCategoreisName}}</option>
//                </select>
//                <!-- <div *ngFor="let p of fg.filterproductSubCategories"></div> -->
//              <!-- <label for=""> {{fg.Quantity}}</label>  -->
              
//                 </div>
//               </div>
//             <div class="col-sm-2">
//               <div class="form-group">
//                 <label for="ProductBrand" class="label">Product Brand</label>
//                 <select id="ProductBrand"  (change)="OnCategoryDDLChange(invoiceEntryForm)"
//                  class="form-control" name="ProductBrand" formControlName="ProductBrand">
//                   <option value=""> Select Product Brand</option>                 
//                   <option *ngFor="let p of productBrands" [(value)]="p.name">{{p.name}}</option>                 
//               </select>
//               </div>
          
//             </div>
           
//             <div class="col-sm-1">
//               <div class="form-group">
//                 <label for="Quantity" class="label">Quantity</label>
//                 <input  type="text" class="form-control"   type="text"
//                 (change)="onQuantityChange(invoiceEntryForm)"  id="Quantity" placeholder="Quantity" formControlName="Quantity">
            
//               </div>

//             </div>
//             <div class="col-sm-2">
//               <div class="form-group">
//                 <label for="Rate" class="label">Rate</label>
//                 <input  type="text" (change)="onRateChange(invoiceEntryForm)" class="form-control"  id="Rate" placeholder="Rate" formControlName="Rate">
            
            
//               </div>

//             </div>
//             <div class="col-sm-2">
//               <div class="form-group">
//                 <label  class="label">Amount</label>
//                 <input  type="text" class="form-control"  id="Amount" name="Amount" 
//                readonly  placeholder="{{fg.value.Amount}}" >
                 
//               </div>

//             </div>
//             <div class="col-sm-1 mt-4">
//               <div class="form-group">
                
//                 <!-- <button  type="submit" class="btn" [disabled]="fg.invalid"
//                 [ngClass]="(fg.get('Key').value=='')?'btn-success':'btn-outline-dark'"><i
//                     class="far fa-save fa-lg"></i>
//                     {{fg.get('Key').value==''?'Submit':'Update'}}
//             </button> -->
//             <!-- <button   class="btn btn-outline-success" (click)="onUpdate(fg,invoiceEntryForm,i)"
//             >
//                 <i  class="far fa-save fa-lg">update</i>
                
//             </button>   -->
//             <button  class="btn btn-light ml-1" (click)="onDelete(invoiceEntryForm,i)"
//             >
//                 <i class="far fa-trash-alt fa-lg text-danger"></i>
                
//             </button>   
//               </div>
      
//             </div>
//           </div>
         
//         </form>
//         <div class="row">
//           <div class="col-sm-2">
//             <div class="form-group">
              
//               <h6>Total</h6>
//             </div>
//           </div>
//           <div class="col-sm-2">
//             <div class="form-group">
              
//             </div>
//           </div>
//           <div class="col-sm-2">
//             <div class="form-group">
              
//             </div>
//           </div>
//           <div class="col-sm-2">
//             <div class="form-group">
//               <button class="btn btn-outline-success" (click)="CalculateTotal(invoiceEntryForm)">
//                 = 
//             </button>
//             </div>
//           </div>
//           <div class="col-sm-2">
//             <div  class="form-group">
//               <input  type="text"
//                [(ngModel)]="totalAmount" 
//                class="form-control"  id="JobNo" placeholder="Total Amount">
//             </div>
//           </div>
//           <div class="col-sm-1 mt-4">
//             <div class="form-group">
//           </div>
           
//           </div> 
//         </div>
//         <div class="row">
//           <div class="col-sm-2">
//             <div class="form-group">
              
//               <h6>Paid Amount</h6>
//             </div>
//           </div>
//           <div class="col-sm-2">
//             <div class="form-group">
              
//             </div>
//           </div>
//           <div class="col-sm-2">
//             <div class="form-group">
              
//             </div>
//           </div>
//           <div class="col-sm-2">
//             <div class="form-group">
            
//             </div>
//           </div>
//           <div class="col-sm-2">
//             <div class="form-group">
//               <input  type="text" [(ngModel)]="PaidAmount" class="form-control"  id="JobNo" placeholder="Paid Amount">
//             </div>
//           </div>
//           <div class="col-sm-2">
//             <div class="form-group">
//               <button [disabled]="invoiceEntryForm.invalid||clinentName==''||Mobile==''"  type="submit" class="btn btn-outline-success"  (click)="allSubmit(invoiceEntryForm)"
//                 ><i
//                     class="far fa-save fa-lg"></i>
//                     Submit
//             </button>
//             </div>
//           </div>
//         </div>

      
            
     
//       </nb-card-body>
//     </nb-card>
//   </div>

  
// </div>



// OnChangeActions(invoiceEntryForm){

//     this.productSubCategories=[];
  
//     this.productSubCategoryService.getAllProductInfo().snapshotChanges().subscribe(item=>{
//       item.forEach(element => {
//         var y = element.payload.toJSON();
//         y["key"] = element.key;
    
//         this.productSubCategories.push(y as ProductSubCategories);        
//       });
    

//       invoiceEntryForm.value.forEach(element => {
       
//          let filterproductSubCategories = (element.ProductCategory) ?
//          this.productSubCategories.filter(p => p.productCategoriesId==element.ProductCategory):
//           this.productSubCategories;     
        

//           element.ProductCategory= element.ProductCategory;
//           element.ProductSubCategory= element.ProductSubCategory;
//           element.ProductBrand= element.ProductBrand;
//           element.Quantity= element.Quantity;
//           element.Rate= element.Rate;
//           element.Amount= parseInt(element.Quantity)*parseInt( element.Rate);
         
       
//         element.filterproductSubCategories=filterproductSubCategories;
       
//        });
      
       
//     });

   
// }